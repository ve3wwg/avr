BLINK_ASSERT(3)         AVR Programmer's Manual            BLINK_ASSERT(3)

NAME        

       blink_assert - abort the program if assertion is false.

SYNOPSIS

       #include <blinkassert.h>

       /* Assumes GPIO already configured for output */

       void bassert_config0(
         volatile uint8_t *portx,   /* Port register, e.g. &PORTB */
         unsigned bit,              /* GPIO bit (0-7) of the port */
         unsigned active_high       /* 0 = active low, else active high */
       );

       /* Configures GPIO for output */

       void bassert_config(
         volatile uint8_t *ddrx,    /* DDR register, e.g. &DDRB */
         volatile uint8_t *portx,   /* Port register, e.g. &PORTB */
         unsigned bit,              /* GPIO bit (0-7) of the port */
         unsigned active_high       /* 0 = active low, else active high */
       );


       /* Assertion test macro */
       void blink_assert(scalar expression, n);


       /* Blink n times and return */
       void bassert_blink(unsigned n);

       /* Blinking exit(2) routine */
       void blink_exit(unsigned rc);

       /* Blinking abort(2) routines */
       void blink_abort();          /* Non macro */
       void blink_cabort();         /* Macro: blink_abort() ifndef NDEBUG */

DESCRIPTION

       If the macro NDEBUG was defined at the moment <blinkassert.h> was 
       last included, the macro blink_assert() generates no code, and hence
       does nothing at all.  Otherwise, the macro causes the configured
       LED to blink forever if the expression is false (i.e., compares
       equal to zero). If the expression is true, control passes through
       unhindered.

       The purpose of this macro is to help programmers find bugs in their
       their code. The idea is that the expression is tested and when it
       evaluates false, then the execution is aborted with an indicator.

       Given that AVR platforms have no concept of abort(), the LED
       configured by bassert_config() is used in its place. When the
       blink_assert() macro needs to abort, it flashes the LED n times,
       pauses and repeats forever.

       The value n in the blink_assert() macro permits the programmer to 
       place several assertion macros in his code. The specific instance
       of an abort can be identified by counting the number of LED blinks.

       The bassert_config() function must be called prior to any of the
       other functions or macros listed on this page. The bassert_config()
       macro configures the GPIO for output, and makes note of the I/O port 
       and bit for the LED outputs.

       Routine bassert_config0() may be used instead, when the programmer
       has already configured the GPIO as an output in his own code. This
       routine simply notes the I/O port and GPIO bit to use for the LED.


       The bassert_blink() function blinks the LED n times and returns. 
       This function is invoked by the macro blink_assert(), in an
       endless loop. If n is provided as zero, the LED turns on without 
       blinking, and remains on.


       Function blink_exit(rc) repeatedly blinks one long LED on followed 
       by a short off period, when the return code rc == 0. Otherwise
       blink_exit(rc) behaves as if bassert_blink(rc) was repeatedly
       called.

       blink_abort() is a general abort function. In contrast to calling
       blink_exit(0), blink_abort() flashes the LED on briefly, followed
       by a long off period. This gives an appearance of a repeated brief 
       flash, indicating a problem.

       Functions blink_exit() and blink_abort() do not return to the caller.

       Macro blink_cabort() is conditionally compiled into your code, 
       when the macro NDEBUG is not defined. The macro invokes the function
       blink_abort(). The programmer can use this macro to instrument his
       code with debug blink_cabort() calls for failure points that are
       assumed to never occur (hence they don't need identification by a 
       blink count). These are "just in case" notifier calls. Later when
       the code is considered debugged, the code produced by these calls
       can be eliminated by compiling with the macro NDEBUG defined.

RETURN VALUE

       No value is returned by any of the functions or macros.

EXAMPLE

       bassert_config(&DDRB,&PORTB,PB5,1);

       blink_assert(flag==1,2); /* Flashes 2 times, if flag != 1 */
       blink_assert(1==0,3);    /* This will always fail, blinking 3 times */

CONFORMING TO

       blink_assert() is based upon the POSIX.1-2001, C89, C99 assert(3) 
       idea.

BUGS

       blink_assert() is implemented as a macro; if the expression tested has
       side-effects, program behavior will be different depending on whether
       NDEBUG is defined.  This may create Heisenbugs which go away when
       debugging is turned on.

       The blinking code depends upon the AVR-libc routine delay_ms(). For
       that reason, builds will need the macro value F_CPU defined.

       Note that while blink_assert() and blink_cabort() respects the NDEBUG
       macro, calls to the other functions remain compiled in. If you also
       want to remove the blink_config() call for example, be sure to wrap 
       the calls like this:

       #ifndef NDEBUG
           bassert_config(&DDRB,&PORTB,PB5,1);
       #endif
